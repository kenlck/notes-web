// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  folders   Folder[]
  notes     Note[]

  @@map("users")
}

model Folder {
  id        String   @id @default(cuid())
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  parentId String?  @map("parent_id")
  parent   Folder?  @relation("NestedFolders", fields: [parentId], references: [id])
  children Folder[] @relation("NestedFolders")

  notes Note[]

  @@map("folders")
}

model Note {
  id           String    @id @default(cuid())
  title        String?
  content      String?
  path         String?   @default("/") // Stores the full path like "/folder1/folder2"
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastOpenedAt DateTime? @map("last_opened_at")
  folderId     String?   @map("folder_id")
  folder       Folder?   @relation(fields: [folderId], references: [id])
  userId       String    @map("user_id")
  user         User      @relation(fields: [userId], references: [id])

  @@map("notes")
}
